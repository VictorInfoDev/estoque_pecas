package estoque_pecas.os;
import estoque_pecas.comandos.ClasseConexao;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.PreparedStatement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author victo
 */
public class abertasOS extends javax.swing.JFrame {
    

    
public void Selecionando()
	{
            //buscar dados usuários para tabela 
            Connection conexao = null;
            Statement  comando = null;
            ResultSet  resultado = null;
            int quantTable = 0;
            try {
                    conexao = ClasseConexao.Conectar();
                    comando = conexao.createStatement();
                    String meu_sql = "SELECT id_os AS 'OS', cpf_cliente_os AS 'CPF', placa_veiculo AS 'Placa', valor_os AS 'Valor Total'  FROM ordem_servico WHERE estado_os = 0";
                    resultado = comando.executeQuery(meu_sql); 
                    tableOS.setModel(DbUtils.resultSetToTableModel(resultado));
                    quantTable = tableOS.getRowCount();
                    if(quantTable == 0){
                        this.dispose();
                        JOptionPane.showMessageDialog(null,"Nenhuma Ordem de Serviço Aberta!");
                    }

            }
            catch (SQLException e)
            {
                    e.printStackTrace();
            }
            finally
            {
                ClasseConexao.FecharConexao(conexao);
                try
                {
                        comando.close();
                        resultado.close();
                }
                catch (SQLException e)
                {
                        e.printStackTrace();
                }
            }		
    }
    public abertasOS() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableOS = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("OS Abertas");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tableOS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableOS);

        jButton2.setText("Concluir OS");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Serviços");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Peças");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton1.setText("Cancelar OS");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton1))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Selecionando();
    }//GEN-LAST:event_formWindowOpened

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int linhaSel = tableOS.getSelectedRow();
        if(linhaSel == -1){
            JOptionPane.showMessageDialog(this, "Nenhuma OS selecionada!","Erro",JOptionPane.ERROR_MESSAGE);
        }else{
            DefaultTableModel model = (DefaultTableModel) tableOS.getModel();
            Integer OSAD = (Integer) model.getValueAt(linhaSel, 0);
            new addPecaOs(OSAD).setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int linhaSel = tableOS.getSelectedRow();
        if(linhaSel == -1){
            JOptionPane.showMessageDialog(this, "Nenhuma OS selecionada!","Erro",JOptionPane.ERROR_MESSAGE);
        }else{
            DefaultTableModel model = (DefaultTableModel) tableOS.getModel();
            Integer OSAD = (Integer) model.getValueAt(linhaSel, 0);
            new addServico(OSAD).setVisible(true);
            this.dispose();
        }// TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int linhaSel = tableOS.getSelectedRow();
 
        if(linhaSel == -1){
            JOptionPane.showMessageDialog(this, "Nenhuma OS selecionada!","Erro",JOptionPane.ERROR_MESSAGE);
        }
        else
        {

            DefaultTableModel model = (DefaultTableModel) tableOS.getModel();
            Integer id = (Integer) model.getValueAt(linhaSel, 0);
            int result = JOptionPane.showConfirmDialog(null,"Confirme para concluir OS: "+id,"Excluindo...", JOptionPane.YES_NO_CANCEL_OPTION);
            if(result == 0){
                Connection conexao = null;
                conexao = ClasseConexao.Conectar();
                PreparedStatement comandoIn = null;
                try{conexao = ClasseConexao.Conectar();
                    //LINHA DE INSERT, DELETE E UPDATE SQL
                    String sqlIn = "UPDATE ordem_servico SET estado_os=1 WHERE id_os=?";
                    comandoIn = conexao.prepareStatement(sqlIn,Statement.RETURN_GENERATED_KEYS);

                    //VALORES PARA OS CAMPOS DA LINHA SQL  
                    comandoIn.setInt(1, id);

                    if(comandoIn.executeUpdate()>0)
                    {
                        //EXECUTA CASO A OPERACAO SEJA REALIZADA COM SUCESSO
                        JOptionPane.showMessageDialog(null, "Ordem de serviço concluída!");
                        Selecionando();

                    }}catch(SQLException erro)
                {erro.printStackTrace();}
                finally{ClasseConexao.FecharConexao(conexao);
                    try{comandoIn.close();}
                    catch(SQLException erro){erro.printStackTrace();}}
                
            }
            
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int linhaSel = tableOS.getSelectedRow();
 
        if(linhaSel == -1){
            JOptionPane.showMessageDialog(this, "Nenhuma OS selecionada!","Erro",JOptionPane.ERROR_MESSAGE);
        }
        else
        {

            DefaultTableModel model = (DefaultTableModel) tableOS.getModel();
            Integer id = (Integer) model.getValueAt(linhaSel, 0);
            int result = JOptionPane.showConfirmDialog(null,"Confirme para excluir OS: "+id,"Excluindo...", JOptionPane.YES_NO_CANCEL_OPTION);
            if(result == 0){
            Connection conexao = null;
            PreparedStatement comandoIn = null;
            try{conexao = ClasseConexao.Conectar();
                //LINHA DE INSERT, DELETE E UPDATE SQL
                String sqlIn = "DELETE FROM pecas_os WHERE id_os_peca=?";
                comandoIn = conexao.prepareStatement(sqlIn,Statement.RETURN_GENERATED_KEYS);

                //VALORES PARA OS CAMPOS DA LINHA SQL  
                comandoIn.setInt(1, id);
                if(comandoIn.executeUpdate()>0)
                {
                    //EXECUTA CASO A OPERACAO SEJA REALIZADA COM SUCESSO
                        conexao = null;
                        PreparedStatement comandoIn2 = null;
                        try{conexao = ClasseConexao.Conectar();
                            //LINHA DE INSERT, DELETE E UPDATE SQL
                            String sqlIn2 = "DELETE FROM ordem_servico WHERE id_os=?";
                            comandoIn2 = conexao.prepareStatement(sqlIn2,Statement.RETURN_GENERATED_KEYS);

                            //VALORES PARA OS CAMPOS DA LINHA SQL  
                            comandoIn2.setInt(1, id);
                            if(comandoIn2.executeUpdate()>0)
                            {
                                //EXECUTA CASO A OPERACAO SEJA REALIZADA COM SUCESSO
                                JOptionPane.showMessageDialog(null, "Ordem de serviço cancelada!");
                                Selecionando();
                            }}catch(SQLException erro)
                        {erro.printStackTrace();}
                        finally{ClasseConexao.FecharConexao(conexao);
                            try{comandoIn2.close();}
                            catch(SQLException erro){erro.printStackTrace();}}

                    }}catch(SQLException erro)
                {erro.printStackTrace();}
                finally{ClasseConexao.FecharConexao(conexao);
                    try{comandoIn.close();}
                    catch(SQLException erro){erro.printStackTrace();}}
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(abertasOS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(abertasOS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(abertasOS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(abertasOS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new abertasOS().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableOS;
    // End of variables declaration//GEN-END:variables
}
